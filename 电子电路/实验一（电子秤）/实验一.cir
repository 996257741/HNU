** t2 **
* 
* NI Multisim to SPICE Netlist Export
* Generated by: lian ton
* Fri, Nov 01, 2024 21:58:23 
*

*## Multisim Component U15 ##*
* !!!BEGIN-INTERACT
*
*  ( External state variables )
*  : Rshunt              ++++f1 ;
*  : Mode                 ++++i3 ;
*
*  ( Internal state variables )
*  0.0      VARIABLE   r1Volt
*  0.0      VARIABLE   r1Cur
*  0         VARIABLE   nTime
*  0         VARIABLE   nTimeCur
*
*  .( Loading the voltmeter.. )  cr
*
*  :  RESET
*       0.0  VALUE  SET_ANIMATION_TEXT
*       Rshunt  SET_INSTANCE Resistor ::R r1 resistance
*       1   RESET_ACDC
*       GET_LOCAL_TIME   ==>_*nTime
*  ;
*
*  :BEGIN_PLOT
*    RESET
*  ;
*
*  :OUT_DATA
*   GET_INSTANCE Resistor ::R r1 i  ==>_*r1Cur
*   (( Rshunt  *r1Cur  f.*  )) 1 ADD_ACDC
*   GET_LOCAL_TIME   ==>_*nTimeCur
*   *nTimeCur *nTime - 2 >= if
*   ((if Mode 1 GET_AC 1 GET_DC ))if   VALUE  SET_ANIMATION_TEXT
*   *nTimeCur   ==>_*nTime
*  endif
*  ;
*
* :  BEGIN_ANALYSIS 
*        RESET
*    ;
*     1  ACDC::ALLOC_INDEX
*
* :SIMULATION_CHANGED
*    ACDC::CIRCUIT_CHANGE
*    GET_LOCAL_TIME   ==>_*nTime
* ;
*
* !!!END-INTERACT

xU15 42 44  VoltmeterU15

.subckt voltmeterU15 1 2
R1 1 2 1e6
.ends

*## Multisim Component V13 ##*
* !!!BEGIN-INTERACT
*  : increment  ++++f8 ;
*  : tmaxvalue  ++++f4 ;
*  : tminvalue  ++++f6 ;
*  0.0          constant mindval
*  100.0        constant maxdval
*  tmaxvalue    VARIABLE maxvalue
*  tminvalue    VARIABLE minvalue
*  50.0         VARIABLE setting
*  0            VARIABLE num_stored
*  0.0          VARIABLE setsourceval
*  0.0          VARIABLE zeroadj
*  0.0          VARIABLE setfactor
*  0            VARIABLE flag
*  0.0          VARIABLE outputval
*
*  :MAP_KEYBOARD_INPUT ++++k1 1 ++++K1  -1 ;
*
*  : UPDATE_SETTINGS
*     *flag 0 = if
*        LOAD_FICL_VARIABLES
*        ==>_*num_stored
*        ==>_*num_stored
*        *num_stored 0 > if
*           ==>_*setting 
*           ==>_*setsourceval
*          *setsourceval SET_INSTANCE vsource ::V V1  dc
*        endif
*      1 ==>_*flag
*      endif
*      0.01 *setting f.* ==>_*setfactor
*      tmaxvalue tminvalue f.- *setfactor f.* tminvalue f.+ ==>_*outputval
*      *outputval VALUE 0 SET_ANIMATION_TEXT_BYID
*      *outputval maxvalue GRADUAL_CHANGE_AT_RUN
*      *outputval *setting 2 0
*      STORE_FICL_VARIABLES
*  ;
*
*  :GRADUAL_CHANGE_AT_RUN locals| ref value |
*    value SET_INSTANCE vsource ::V V1  dc
*  ;
*
*  :KEYBOARD_INPUT locals| shift_state |
*     shift_state (float) increment f.* *setting  f.+  ==>_*setting
*     mindval maxdval *setting f.min f.max ==>_*setting
*     UPDATE_SETTINGS
*  ;
*
*  :BEGIN_PLOT
*     UPDATE_SETTINGS
*  ;
*
*  :BEGIN_ANALYSIS
*    UPDATE_SETTINGS
*  ;
*
*  : INIT_SLIDER
*      maxdval mindval 3 IMOUSE_SET
*  ;
*
*  : ON_IMOUSE_EVENT locals| eType fValue |
*    eType 9 = if
*      -1
*      fValue ==>_*setting
*    else
*      0
*    endif
*    UPDATE_SETTINGS
*  ;
*
*  : GET_INTERACT_VALUE locals| eType |
*      eType 0 = if
*        *setting
*      else eType 1 = if
*        mindval
*      else eType 2 = if
*        maxdval
*      else eType 3 = if
*        increment
*      else
*        0
*      endif endif endif endif
*  ;
*
*  : SET_INTERACT_VALUE locals| eType fValue |
*      eType 0 = if
*        fValue ==>_*setting
*      endif
*      UPDATE_SETTINGS
*  ;
*
*  :ON_USER_UPDATE
*    UPDATE_SETTINGS
*    INIT_SLIDER
*  ;
*
* !!!END-INTERACT
xV13 56 53 VariableDCVoltageV13
.subckt VariableDCVoltageV13 1 2
V1 1 2  10
.ends

*## Multisim Component V12 ##*
* !!!BEGIN-INTERACT
*  : increment  ++++f8 ;
*  : tmaxvalue  ++++f4 ;
*  : tminvalue  ++++f6 ;
*  0.0          constant mindval
*  100.0        constant maxdval
*  tmaxvalue    VARIABLE maxvalue
*  tminvalue    VARIABLE minvalue
*  50.0         VARIABLE setting
*  0            VARIABLE num_stored
*  0.0          VARIABLE setsourceval
*  0.0          VARIABLE zeroadj
*  0.0          VARIABLE setfactor
*  0            VARIABLE flag
*  0.0          VARIABLE outputval
*
*  :MAP_KEYBOARD_INPUT ++++k1 1 ++++K1  -1 ;
*
*  : UPDATE_SETTINGS
*     *flag 0 = if
*        LOAD_FICL_VARIABLES
*        ==>_*num_stored
*        ==>_*num_stored
*        *num_stored 0 > if
*           ==>_*setting 
*           ==>_*setsourceval
*          *setsourceval SET_INSTANCE vsource ::V V1  dc
*        endif
*      1 ==>_*flag
*      endif
*      0.01 *setting f.* ==>_*setfactor
*      tmaxvalue tminvalue f.- *setfactor f.* tminvalue f.+ ==>_*outputval
*      *outputval VALUE 0 SET_ANIMATION_TEXT_BYID
*      *outputval maxvalue GRADUAL_CHANGE_AT_RUN
*      *outputval *setting 2 0
*      STORE_FICL_VARIABLES
*  ;
*
*  :GRADUAL_CHANGE_AT_RUN locals| ref value |
*    value SET_INSTANCE vsource ::V V1  dc
*  ;
*
*  :KEYBOARD_INPUT locals| shift_state |
*     shift_state (float) increment f.* *setting  f.+  ==>_*setting
*     mindval maxdval *setting f.min f.max ==>_*setting
*     UPDATE_SETTINGS
*  ;
*
*  :BEGIN_PLOT
*     UPDATE_SETTINGS
*  ;
*
*  :BEGIN_ANALYSIS
*    UPDATE_SETTINGS
*  ;
*
*  : INIT_SLIDER
*      maxdval mindval 3 IMOUSE_SET
*  ;
*
*  : ON_IMOUSE_EVENT locals| eType fValue |
*    eType 9 = if
*      -1
*      fValue ==>_*setting
*    else
*      0
*    endif
*    UPDATE_SETTINGS
*  ;
*
*  : GET_INTERACT_VALUE locals| eType |
*      eType 0 = if
*        *setting
*      else eType 1 = if
*        mindval
*      else eType 2 = if
*        maxdval
*      else eType 3 = if
*        increment
*      else
*        0
*      endif endif endif endif
*  ;
*
*  : SET_INTERACT_VALUE locals| eType fValue |
*      eType 0 = if
*        fValue ==>_*setting
*      endif
*      UPDATE_SETTINGS
*  ;
*
*  :ON_USER_UPDATE
*    UPDATE_SETTINGS
*    INIT_SLIDER
*  ;
*
* !!!END-INTERACT
xV12 49 50 VariableDCVoltageV12
.subckt VariableDCVoltageV12 1 2
V1 1 2  10
.ends

*## Multisim Component V11 ##*
* !!!BEGIN-INTERACT
*  : increment  ++++f8 ;
*  : tmaxvalue  ++++f4 ;
*  : tminvalue  ++++f6 ;
*  0.0          constant mindval
*  100.0        constant maxdval
*  tmaxvalue    VARIABLE maxvalue
*  tminvalue    VARIABLE minvalue
*  50.0         VARIABLE setting
*  0            VARIABLE num_stored
*  0.0          VARIABLE setsourceval
*  0.0          VARIABLE zeroadj
*  0.0          VARIABLE setfactor
*  0            VARIABLE flag
*  0.0          VARIABLE outputval
*
*  :MAP_KEYBOARD_INPUT ++++k1 1 ++++K1  -1 ;
*
*  : UPDATE_SETTINGS
*     *flag 0 = if
*        LOAD_FICL_VARIABLES
*        ==>_*num_stored
*        ==>_*num_stored
*        *num_stored 0 > if
*           ==>_*setting 
*           ==>_*setsourceval
*          *setsourceval SET_INSTANCE vsource ::V V1  dc
*        endif
*      1 ==>_*flag
*      endif
*      0.01 *setting f.* ==>_*setfactor
*      tmaxvalue tminvalue f.- *setfactor f.* tminvalue f.+ ==>_*outputval
*      *outputval VALUE 0 SET_ANIMATION_TEXT_BYID
*      *outputval maxvalue GRADUAL_CHANGE_AT_RUN
*      *outputval *setting 2 0
*      STORE_FICL_VARIABLES
*  ;
*
*  :GRADUAL_CHANGE_AT_RUN locals| ref value |
*    value SET_INSTANCE vsource ::V V1  dc
*  ;
*
*  :KEYBOARD_INPUT locals| shift_state |
*     shift_state (float) increment f.* *setting  f.+  ==>_*setting
*     mindval maxdval *setting f.min f.max ==>_*setting
*     UPDATE_SETTINGS
*  ;
*
*  :BEGIN_PLOT
*     UPDATE_SETTINGS
*  ;
*
*  :BEGIN_ANALYSIS
*    UPDATE_SETTINGS
*  ;
*
*  : INIT_SLIDER
*      maxdval mindval 3 IMOUSE_SET
*  ;
*
*  : ON_IMOUSE_EVENT locals| eType fValue |
*    eType 9 = if
*      -1
*      fValue ==>_*setting
*    else
*      0
*    endif
*    UPDATE_SETTINGS
*  ;
*
*  : GET_INTERACT_VALUE locals| eType |
*      eType 0 = if
*        *setting
*      else eType 1 = if
*        mindval
*      else eType 2 = if
*        maxdval
*      else eType 3 = if
*        increment
*      else
*        0
*      endif endif endif endif
*  ;
*
*  : SET_INTERACT_VALUE locals| eType fValue |
*      eType 0 = if
*        fValue ==>_*setting
*      endif
*      UPDATE_SETTINGS
*  ;
*
*  :ON_USER_UPDATE
*    UPDATE_SETTINGS
*    INIT_SLIDER
*  ;
*
* !!!END-INTERACT
xV11 47 48 VariableDCVoltageV11
.subckt VariableDCVoltageV11 1 2
V1 1 2  10
.ends

*## Multisim Component V10 ##*
* !!!BEGIN-INTERACT
*  : increment  ++++f8 ;
*  : tmaxvalue  ++++f4 ;
*  : tminvalue  ++++f6 ;
*  0.0          constant mindval
*  100.0        constant maxdval
*  tmaxvalue    VARIABLE maxvalue
*  tminvalue    VARIABLE minvalue
*  50.0         VARIABLE setting
*  0            VARIABLE num_stored
*  0.0          VARIABLE setsourceval
*  0.0          VARIABLE zeroadj
*  0.0          VARIABLE setfactor
*  0            VARIABLE flag
*  0.0          VARIABLE outputval
*
*  :MAP_KEYBOARD_INPUT ++++k1 1 ++++K1  -1 ;
*
*  : UPDATE_SETTINGS
*     *flag 0 = if
*        LOAD_FICL_VARIABLES
*        ==>_*num_stored
*        ==>_*num_stored
*        *num_stored 0 > if
*           ==>_*setting 
*           ==>_*setsourceval
*          *setsourceval SET_INSTANCE vsource ::V V1  dc
*        endif
*      1 ==>_*flag
*      endif
*      0.01 *setting f.* ==>_*setfactor
*      tmaxvalue tminvalue f.- *setfactor f.* tminvalue f.+ ==>_*outputval
*      *outputval VALUE 0 SET_ANIMATION_TEXT_BYID
*      *outputval maxvalue GRADUAL_CHANGE_AT_RUN
*      *outputval *setting 2 0
*      STORE_FICL_VARIABLES
*  ;
*
*  :GRADUAL_CHANGE_AT_RUN locals| ref value |
*    value SET_INSTANCE vsource ::V V1  dc
*  ;
*
*  :KEYBOARD_INPUT locals| shift_state |
*     shift_state (float) increment f.* *setting  f.+  ==>_*setting
*     mindval maxdval *setting f.min f.max ==>_*setting
*     UPDATE_SETTINGS
*  ;
*
*  :BEGIN_PLOT
*     UPDATE_SETTINGS
*  ;
*
*  :BEGIN_ANALYSIS
*    UPDATE_SETTINGS
*  ;
*
*  : INIT_SLIDER
*      maxdval mindval 3 IMOUSE_SET
*  ;
*
*  : ON_IMOUSE_EVENT locals| eType fValue |
*    eType 9 = if
*      -1
*      fValue ==>_*setting
*    else
*      0
*    endif
*    UPDATE_SETTINGS
*  ;
*
*  : GET_INTERACT_VALUE locals| eType |
*      eType 0 = if
*        *setting
*      else eType 1 = if
*        mindval
*      else eType 2 = if
*        maxdval
*      else eType 3 = if
*        increment
*      else
*        0
*      endif endif endif endif
*  ;
*
*  : SET_INTERACT_VALUE locals| eType fValue |
*      eType 0 = if
*        fValue ==>_*setting
*      endif
*      UPDATE_SETTINGS
*  ;
*
*  :ON_USER_UPDATE
*    UPDATE_SETTINGS
*    INIT_SLIDER
*  ;
*
* !!!END-INTERACT
xV10 46 45 VariableDCVoltageV10
.subckt VariableDCVoltageV10 1 2
V1 1 2  10
.ends

*## Multisim Component U14 ##*
* !!!BEGIN-INTERACT
*  : Ohms_per_Volt  ++++f2 ;
*  0.0  VARIABLE    Resistor_Current
*  0.0  VARIABLE    Applied_Voltage
*  0.0  VARIABLE    Resulting_Resistance
*
* :OUT_DATA
*     GET_INSTANCE Vsource ::V Vsns i ==>_*Resistor_Current
*     *Resistor_Current 1.0e9 f.* ==>_*Applied_Voltage
*     *Applied_Voltage f.abs ==>_*Applied_Voltage
*     Ohms_per_Volt *Applied_Voltage f.* ==>_*Resulting_Resistance
*     *Resulting_Resistance VALUE 0 SET_ANIMATION_TEXT_BYID
* ;
*
* :ON_USER_UPDATE
*     0.0 ==>_*Resistor_Current
*     0.0 ==>_*Applied_Voltage
*     0.0 ==>_*Resulting_Resistance
* ;
*
* !!!END-INTERACT
xU14 56 53 36 43 Voltage_Controlled_ResistorU14 PARAMS: Ohms_per_Volt=0.004185
.subckt Voltage_Controlled_ResistorU14 1 2 4 5 PARAMS: Ohms_per_Volt=1
RIN 1 1a 1G
Vsns 1a 2 DC 0
EOUT  4 6 POLY(2) (1,2) (3,0) 0 0 0 0 {Ohms_per_Volt/1000}
FCOPY 0 3 VSENSE 1
RSENSOR 3 0 1K
* CURRENT SENSE
VSENSE  6 5 0
.ENDS

*## Multisim Component U13 ##*
* !!!BEGIN-INTERACT
*  : Ohms_per_Volt  ++++f2 ;
*  0.0  VARIABLE    Resistor_Current
*  0.0  VARIABLE    Applied_Voltage
*  0.0  VARIABLE    Resulting_Resistance
*
* :OUT_DATA
*     GET_INSTANCE Vsource ::V Vsns i ==>_*Resistor_Current
*     *Resistor_Current 1.0e9 f.* ==>_*Applied_Voltage
*     *Applied_Voltage f.abs ==>_*Applied_Voltage
*     Ohms_per_Volt *Applied_Voltage f.* ==>_*Resulting_Resistance
*     *Resulting_Resistance VALUE 0 SET_ANIMATION_TEXT_BYID
* ;
*
* :ON_USER_UPDATE
*     0.0 ==>_*Resistor_Current
*     0.0 ==>_*Applied_Voltage
*     0.0 ==>_*Resulting_Resistance
* ;
*
* !!!END-INTERACT
xU13 50 49 36 41 Voltage_Controlled_ResistorU13 PARAMS: Ohms_per_Volt=0.004185
.subckt Voltage_Controlled_ResistorU13 1 2 4 5 PARAMS: Ohms_per_Volt=1
RIN 1 1a 1G
Vsns 1a 2 DC 0
EOUT  4 6 POLY(2) (1,2) (3,0) 0 0 0 0 {Ohms_per_Volt/1000}
FCOPY 0 3 VSENSE 1
RSENSOR 3 0 1K
* CURRENT SENSE
VSENSE  6 5 0
.ENDS

*## Multisim Component U12 ##*
* !!!BEGIN-INTERACT
*  : Ohms_per_Volt  ++++f2 ;
*  0.0  VARIABLE    Resistor_Current
*  0.0  VARIABLE    Applied_Voltage
*  0.0  VARIABLE    Resulting_Resistance
*
* :OUT_DATA
*     GET_INSTANCE Vsource ::V Vsns i ==>_*Resistor_Current
*     *Resistor_Current 1.0e9 f.* ==>_*Applied_Voltage
*     *Applied_Voltage f.abs ==>_*Applied_Voltage
*     Ohms_per_Volt *Applied_Voltage f.* ==>_*Resulting_Resistance
*     *Resulting_Resistance VALUE 0 SET_ANIMATION_TEXT_BYID
* ;
*
* :ON_USER_UPDATE
*     0.0 ==>_*Resistor_Current
*     0.0 ==>_*Applied_Voltage
*     0.0 ==>_*Resulting_Resistance
* ;
*
* !!!END-INTERACT
xU12 48 47 44 40 Voltage_Controlled_ResistorU12 PARAMS: Ohms_per_Volt=0.004185
.subckt Voltage_Controlled_ResistorU12 1 2 4 5 PARAMS: Ohms_per_Volt=1
RIN 1 1a 1G
Vsns 1a 2 DC 0
EOUT  4 6 POLY(2) (1,2) (3,0) 0 0 0 0 {Ohms_per_Volt/1000}
FCOPY 0 3 VSENSE 1
RSENSOR 3 0 1K
* CURRENT SENSE
VSENSE  6 5 0
.ENDS

*## Multisim Component U11 ##*
* !!!BEGIN-INTERACT
*  : Ohms_per_Volt  ++++f2 ;
*  0.0  VARIABLE    Resistor_Current
*  0.0  VARIABLE    Applied_Voltage
*  0.0  VARIABLE    Resulting_Resistance
*
* :OUT_DATA
*     GET_INSTANCE Vsource ::V Vsns i ==>_*Resistor_Current
*     *Resistor_Current 1.0e9 f.* ==>_*Applied_Voltage
*     *Applied_Voltage f.abs ==>_*Applied_Voltage
*     Ohms_per_Volt *Applied_Voltage f.* ==>_*Resulting_Resistance
*     *Resulting_Resistance VALUE 0 SET_ANIMATION_TEXT_BYID
* ;
*
* :ON_USER_UPDATE
*     0.0 ==>_*Resistor_Current
*     0.0 ==>_*Applied_Voltage
*     0.0 ==>_*Resulting_Resistance
* ;
*
* !!!END-INTERACT
xU11 46 45 42 39 Voltage_Controlled_ResistorU11 PARAMS: Ohms_per_Volt=0.004185
.subckt Voltage_Controlled_ResistorU11 1 2 4 5 PARAMS: Ohms_per_Volt=1
RIN 1 1a 1G
Vsns 1a 2 DC 0
EOUT  4 6 POLY(2) (1,2) (3,0) 0 0 0 0 {Ohms_per_Volt/1000}
FCOPY 0 3 VSENSE 1
RSENSOR 3 0 1K
* CURRENT SENSE
VSENSE  6 5 0
.ENDS

*## Multisim Component R6 ##*
rR6 44 43 348 vresR6  
.model vresR6 r(  )

*## Multisim Component R5 ##*
rR5 42 41 348 vresR5  
.model vresR5 r(  )

*## Multisim Component R4 ##*
rR4 38 40 348 vresR4  
.model vresR4 r(  )

*## Multisim Component R3 ##*
rR3 38 39 348 vresR3  
.model vresR3 r(  )

*## Multisim Component V9 ##*
vV9 38 36 dc 20 ac 0 0
+           distof1 0 0
+           distof2 0 0

*## Multisim Component R11 ##*
rR11 21 25 10 vresR11  
.model vresR11 r(  )

*## Multisim Instrument XSC1 ##*


*## Multisim Component V8 ##*
vV8 37 0
+   pulse( 0 5 0 1e-009 1e-009
+   {50*0.01/10000}
+   {1/10000})

*## Multisim Component V7 ##*
vV7 35 0 dc 1.44 ac 0 0
+           distof1 0 0
+           distof2 0 0

*## Multisim Component X9 ##*
* !!!BEGIN-INTERACT
*  : v_level            ++++f2 ;
*  0.0       VARIABLE   r1Volt
*  0.0       VARIABLE   r1Cur
*
*  :UPDATE_SETTINGS
*       1 5 0 SET_SUBCOMP_PRP
*       0 7 0 SET_SUBCOMP_PRP
*       0 8 0 SET_SUBCOMP_PRP
*       0 9 0 SET_SUBCOMP_PRP
*       0 10 0 SET_SUBCOMP_PRP
*       0 11 0 SET_SUBCOMP_PRP
*       0 12 0 SET_SUBCOMP_PRP
*       0 13 0 SET_SUBCOMP_PRP
*       0 14 0 SET_SUBCOMP_PRP
*       0.0 ==>_*r1Volt
*       0.0 ==>_*r1Cur
*  ;   
*
*  :OUT_DATA
*   GET_INSTANCE Resistor ::R r1 i  ==>_*r1Cur
*   1.0e12 *r1Cur f.*  ==>_*r1Volt
*   v_level *r1Volt  f.<=   if
*       0 5 0 SET_SUBCOMP_PRP
*       1 7 0 SET_SUBCOMP_PRP
*       1 8 0 SET_SUBCOMP_PRP
*       1 9 0 SET_SUBCOMP_PRP
*       1 10 0 SET_SUBCOMP_PRP
*       1 11 0 SET_SUBCOMP_PRP
*       1 12 0 SET_SUBCOMP_PRP
*       1 13 0 SET_SUBCOMP_PRP
*       1 14 0 SET_SUBCOMP_PRP
*   else
*       1 5 0 SET_SUBCOMP_PRP
*       0 7 0 SET_SUBCOMP_PRP
*       0 8 0 SET_SUBCOMP_PRP
*       0 9 0 SET_SUBCOMP_PRP
*       0 10 0 SET_SUBCOMP_PRP
*       0 11 0 SET_SUBCOMP_PRP
*       0 12 0 SET_SUBCOMP_PRP
*       0 13 0 SET_SUBCOMP_PRP
*       0 14 0 SET_SUBCOMP_PRP
*   endif
*  ;
*
*  :BEGIN_PLOT
*     UPDATE_SETTINGS
*  ;
* !!!END-INTERACT
xX9 34 ProbeX9
.subckt ProbeX9 1  
R1 1 0 1e12
.ends

*## Multisim Component X8 ##*
* !!!BEGIN-INTERACT
*  : v_level            ++++f2 ;
*  0.0       VARIABLE   r1Volt
*  0.0       VARIABLE   r1Cur
*
*  :UPDATE_SETTINGS
*       1 5 0 SET_SUBCOMP_PRP
*       0 7 0 SET_SUBCOMP_PRP
*       0 8 0 SET_SUBCOMP_PRP
*       0 9 0 SET_SUBCOMP_PRP
*       0 10 0 SET_SUBCOMP_PRP
*       0 11 0 SET_SUBCOMP_PRP
*       0 12 0 SET_SUBCOMP_PRP
*       0 13 0 SET_SUBCOMP_PRP
*       0 14 0 SET_SUBCOMP_PRP
*       0.0 ==>_*r1Volt
*       0.0 ==>_*r1Cur
*  ;   
*
*  :OUT_DATA
*   GET_INSTANCE Resistor ::R r1 i  ==>_*r1Cur
*   1.0e12 *r1Cur f.*  ==>_*r1Volt
*   v_level *r1Volt  f.<=   if
*       0 5 0 SET_SUBCOMP_PRP
*       1 7 0 SET_SUBCOMP_PRP
*       1 8 0 SET_SUBCOMP_PRP
*       1 9 0 SET_SUBCOMP_PRP
*       1 10 0 SET_SUBCOMP_PRP
*       1 11 0 SET_SUBCOMP_PRP
*       1 12 0 SET_SUBCOMP_PRP
*       1 13 0 SET_SUBCOMP_PRP
*       1 14 0 SET_SUBCOMP_PRP
*   else
*       1 5 0 SET_SUBCOMP_PRP
*       0 7 0 SET_SUBCOMP_PRP
*       0 8 0 SET_SUBCOMP_PRP
*       0 9 0 SET_SUBCOMP_PRP
*       0 10 0 SET_SUBCOMP_PRP
*       0 11 0 SET_SUBCOMP_PRP
*       0 12 0 SET_SUBCOMP_PRP
*       0 13 0 SET_SUBCOMP_PRP
*       0 14 0 SET_SUBCOMP_PRP
*   endif
*  ;
*
*  :BEGIN_PLOT
*     UPDATE_SETTINGS
*  ;
* !!!END-INTERACT
xX8 33 ProbeX8
.subckt ProbeX8 1  
R1 1 0 1e12
.ends

*## Multisim Component X7 ##*
* !!!BEGIN-INTERACT
*  : v_level            ++++f2 ;
*  0.0       VARIABLE   r1Volt
*  0.0       VARIABLE   r1Cur
*
*  :UPDATE_SETTINGS
*       1 5 0 SET_SUBCOMP_PRP
*       0 7 0 SET_SUBCOMP_PRP
*       0 8 0 SET_SUBCOMP_PRP
*       0 9 0 SET_SUBCOMP_PRP
*       0 10 0 SET_SUBCOMP_PRP
*       0 11 0 SET_SUBCOMP_PRP
*       0 12 0 SET_SUBCOMP_PRP
*       0 13 0 SET_SUBCOMP_PRP
*       0 14 0 SET_SUBCOMP_PRP
*       0.0 ==>_*r1Volt
*       0.0 ==>_*r1Cur
*  ;   
*
*  :OUT_DATA
*   GET_INSTANCE Resistor ::R r1 i  ==>_*r1Cur
*   1.0e12 *r1Cur f.*  ==>_*r1Volt
*   v_level *r1Volt  f.<=   if
*       0 5 0 SET_SUBCOMP_PRP
*       1 7 0 SET_SUBCOMP_PRP
*       1 8 0 SET_SUBCOMP_PRP
*       1 9 0 SET_SUBCOMP_PRP
*       1 10 0 SET_SUBCOMP_PRP
*       1 11 0 SET_SUBCOMP_PRP
*       1 12 0 SET_SUBCOMP_PRP
*       1 13 0 SET_SUBCOMP_PRP
*       1 14 0 SET_SUBCOMP_PRP
*   else
*       1 5 0 SET_SUBCOMP_PRP
*       0 7 0 SET_SUBCOMP_PRP
*       0 8 0 SET_SUBCOMP_PRP
*       0 9 0 SET_SUBCOMP_PRP
*       0 10 0 SET_SUBCOMP_PRP
*       0 11 0 SET_SUBCOMP_PRP
*       0 12 0 SET_SUBCOMP_PRP
*       0 13 0 SET_SUBCOMP_PRP
*       0 14 0 SET_SUBCOMP_PRP
*   endif
*  ;
*
*  :BEGIN_PLOT
*     UPDATE_SETTINGS
*  ;
* !!!END-INTERACT
xX7 32 ProbeX7
.subckt ProbeX7 1  
R1 1 0 1e12
.ends

*## Multisim Component X6 ##*
* !!!BEGIN-INTERACT
*  : v_level            ++++f2 ;
*  0.0       VARIABLE   r1Volt
*  0.0       VARIABLE   r1Cur
*
*  :UPDATE_SETTINGS
*       1 5 0 SET_SUBCOMP_PRP
*       0 7 0 SET_SUBCOMP_PRP
*       0 8 0 SET_SUBCOMP_PRP
*       0 9 0 SET_SUBCOMP_PRP
*       0 10 0 SET_SUBCOMP_PRP
*       0 11 0 SET_SUBCOMP_PRP
*       0 12 0 SET_SUBCOMP_PRP
*       0 13 0 SET_SUBCOMP_PRP
*       0 14 0 SET_SUBCOMP_PRP
*       0.0 ==>_*r1Volt
*       0.0 ==>_*r1Cur
*  ;   
*
*  :OUT_DATA
*   GET_INSTANCE Resistor ::R r1 i  ==>_*r1Cur
*   1.0e12 *r1Cur f.*  ==>_*r1Volt
*   v_level *r1Volt  f.<=   if
*       0 5 0 SET_SUBCOMP_PRP
*       1 7 0 SET_SUBCOMP_PRP
*       1 8 0 SET_SUBCOMP_PRP
*       1 9 0 SET_SUBCOMP_PRP
*       1 10 0 SET_SUBCOMP_PRP
*       1 11 0 SET_SUBCOMP_PRP
*       1 12 0 SET_SUBCOMP_PRP
*       1 13 0 SET_SUBCOMP_PRP
*       1 14 0 SET_SUBCOMP_PRP
*   else
*       1 5 0 SET_SUBCOMP_PRP
*       0 7 0 SET_SUBCOMP_PRP
*       0 8 0 SET_SUBCOMP_PRP
*       0 9 0 SET_SUBCOMP_PRP
*       0 10 0 SET_SUBCOMP_PRP
*       0 11 0 SET_SUBCOMP_PRP
*       0 12 0 SET_SUBCOMP_PRP
*       0 13 0 SET_SUBCOMP_PRP
*       0 14 0 SET_SUBCOMP_PRP
*   endif
*  ;
*
*  :BEGIN_PLOT
*     UPDATE_SETTINGS
*  ;
* !!!END-INTERACT
xX6 31 ProbeX6
.subckt ProbeX6 1  
R1 1 0 1e12
.ends

*## Multisim Component X5 ##*
* !!!BEGIN-INTERACT
*  : v_level            ++++f2 ;
*  0.0       VARIABLE   r1Volt
*  0.0       VARIABLE   r1Cur
*
*  :UPDATE_SETTINGS
*       1 5 0 SET_SUBCOMP_PRP
*       0 7 0 SET_SUBCOMP_PRP
*       0 8 0 SET_SUBCOMP_PRP
*       0 9 0 SET_SUBCOMP_PRP
*       0 10 0 SET_SUBCOMP_PRP
*       0 11 0 SET_SUBCOMP_PRP
*       0 12 0 SET_SUBCOMP_PRP
*       0 13 0 SET_SUBCOMP_PRP
*       0 14 0 SET_SUBCOMP_PRP
*       0.0 ==>_*r1Volt
*       0.0 ==>_*r1Cur
*  ;   
*
*  :OUT_DATA
*   GET_INSTANCE Resistor ::R r1 i  ==>_*r1Cur
*   1.0e12 *r1Cur f.*  ==>_*r1Volt
*   v_level *r1Volt  f.<=   if
*       0 5 0 SET_SUBCOMP_PRP
*       1 7 0 SET_SUBCOMP_PRP
*       1 8 0 SET_SUBCOMP_PRP
*       1 9 0 SET_SUBCOMP_PRP
*       1 10 0 SET_SUBCOMP_PRP
*       1 11 0 SET_SUBCOMP_PRP
*       1 12 0 SET_SUBCOMP_PRP
*       1 13 0 SET_SUBCOMP_PRP
*       1 14 0 SET_SUBCOMP_PRP
*   else
*       1 5 0 SET_SUBCOMP_PRP
*       0 7 0 SET_SUBCOMP_PRP
*       0 8 0 SET_SUBCOMP_PRP
*       0 9 0 SET_SUBCOMP_PRP
*       0 10 0 SET_SUBCOMP_PRP
*       0 11 0 SET_SUBCOMP_PRP
*       0 12 0 SET_SUBCOMP_PRP
*       0 13 0 SET_SUBCOMP_PRP
*       0 14 0 SET_SUBCOMP_PRP
*   endif
*  ;
*
*  :BEGIN_PLOT
*     UPDATE_SETTINGS
*  ;
* !!!END-INTERACT
xX5 30 ProbeX5
.subckt ProbeX5 1  
R1 1 0 1e12
.ends

*## Multisim Component X4 ##*
* !!!BEGIN-INTERACT
*  : v_level            ++++f2 ;
*  0.0       VARIABLE   r1Volt
*  0.0       VARIABLE   r1Cur
*
*  :UPDATE_SETTINGS
*       1 5 0 SET_SUBCOMP_PRP
*       0 7 0 SET_SUBCOMP_PRP
*       0 8 0 SET_SUBCOMP_PRP
*       0 9 0 SET_SUBCOMP_PRP
*       0 10 0 SET_SUBCOMP_PRP
*       0 11 0 SET_SUBCOMP_PRP
*       0 12 0 SET_SUBCOMP_PRP
*       0 13 0 SET_SUBCOMP_PRP
*       0 14 0 SET_SUBCOMP_PRP
*       0.0 ==>_*r1Volt
*       0.0 ==>_*r1Cur
*  ;   
*
*  :OUT_DATA
*   GET_INSTANCE Resistor ::R r1 i  ==>_*r1Cur
*   1.0e12 *r1Cur f.*  ==>_*r1Volt
*   v_level *r1Volt  f.<=   if
*       0 5 0 SET_SUBCOMP_PRP
*       1 7 0 SET_SUBCOMP_PRP
*       1 8 0 SET_SUBCOMP_PRP
*       1 9 0 SET_SUBCOMP_PRP
*       1 10 0 SET_SUBCOMP_PRP
*       1 11 0 SET_SUBCOMP_PRP
*       1 12 0 SET_SUBCOMP_PRP
*       1 13 0 SET_SUBCOMP_PRP
*       1 14 0 SET_SUBCOMP_PRP
*   else
*       1 5 0 SET_SUBCOMP_PRP
*       0 7 0 SET_SUBCOMP_PRP
*       0 8 0 SET_SUBCOMP_PRP
*       0 9 0 SET_SUBCOMP_PRP
*       0 10 0 SET_SUBCOMP_PRP
*       0 11 0 SET_SUBCOMP_PRP
*       0 12 0 SET_SUBCOMP_PRP
*       0 13 0 SET_SUBCOMP_PRP
*       0 14 0 SET_SUBCOMP_PRP
*   endif
*  ;
*
*  :BEGIN_PLOT
*     UPDATE_SETTINGS
*  ;
* !!!END-INTERACT
xX4 29 ProbeX4
.subckt ProbeX4 1  
R1 1 0 1e12
.ends

*## Multisim Component X3 ##*
* !!!BEGIN-INTERACT
*  : v_level            ++++f2 ;
*  0.0       VARIABLE   r1Volt
*  0.0       VARIABLE   r1Cur
*
*  :UPDATE_SETTINGS
*       1 5 0 SET_SUBCOMP_PRP
*       0 7 0 SET_SUBCOMP_PRP
*       0 8 0 SET_SUBCOMP_PRP
*       0 9 0 SET_SUBCOMP_PRP
*       0 10 0 SET_SUBCOMP_PRP
*       0 11 0 SET_SUBCOMP_PRP
*       0 12 0 SET_SUBCOMP_PRP
*       0 13 0 SET_SUBCOMP_PRP
*       0 14 0 SET_SUBCOMP_PRP
*       0.0 ==>_*r1Volt
*       0.0 ==>_*r1Cur
*  ;   
*
*  :OUT_DATA
*   GET_INSTANCE Resistor ::R r1 i  ==>_*r1Cur
*   1.0e12 *r1Cur f.*  ==>_*r1Volt
*   v_level *r1Volt  f.<=   if
*       0 5 0 SET_SUBCOMP_PRP
*       1 7 0 SET_SUBCOMP_PRP
*       1 8 0 SET_SUBCOMP_PRP
*       1 9 0 SET_SUBCOMP_PRP
*       1 10 0 SET_SUBCOMP_PRP
*       1 11 0 SET_SUBCOMP_PRP
*       1 12 0 SET_SUBCOMP_PRP
*       1 13 0 SET_SUBCOMP_PRP
*       1 14 0 SET_SUBCOMP_PRP
*   else
*       1 5 0 SET_SUBCOMP_PRP
*       0 7 0 SET_SUBCOMP_PRP
*       0 8 0 SET_SUBCOMP_PRP
*       0 9 0 SET_SUBCOMP_PRP
*       0 10 0 SET_SUBCOMP_PRP
*       0 11 0 SET_SUBCOMP_PRP
*       0 12 0 SET_SUBCOMP_PRP
*       0 13 0 SET_SUBCOMP_PRP
*       0 14 0 SET_SUBCOMP_PRP
*   endif
*  ;
*
*  :BEGIN_PLOT
*     UPDATE_SETTINGS
*  ;
* !!!END-INTERACT
xX3 28 ProbeX3
.subckt ProbeX3 1  
R1 1 0 1e12
.ends

*## Multisim Component X2 ##*
* !!!BEGIN-INTERACT
*  : v_level            ++++f2 ;
*  0.0       VARIABLE   r1Volt
*  0.0       VARIABLE   r1Cur
*
*  :UPDATE_SETTINGS
*       1 5 0 SET_SUBCOMP_PRP
*       0 7 0 SET_SUBCOMP_PRP
*       0 8 0 SET_SUBCOMP_PRP
*       0 9 0 SET_SUBCOMP_PRP
*       0 10 0 SET_SUBCOMP_PRP
*       0 11 0 SET_SUBCOMP_PRP
*       0 12 0 SET_SUBCOMP_PRP
*       0 13 0 SET_SUBCOMP_PRP
*       0 14 0 SET_SUBCOMP_PRP
*       0.0 ==>_*r1Volt
*       0.0 ==>_*r1Cur
*  ;   
*
*  :OUT_DATA
*   GET_INSTANCE Resistor ::R r1 i  ==>_*r1Cur
*   1.0e12 *r1Cur f.*  ==>_*r1Volt
*   v_level *r1Volt  f.<=   if
*       0 5 0 SET_SUBCOMP_PRP
*       1 7 0 SET_SUBCOMP_PRP
*       1 8 0 SET_SUBCOMP_PRP
*       1 9 0 SET_SUBCOMP_PRP
*       1 10 0 SET_SUBCOMP_PRP
*       1 11 0 SET_SUBCOMP_PRP
*       1 12 0 SET_SUBCOMP_PRP
*       1 13 0 SET_SUBCOMP_PRP
*       1 14 0 SET_SUBCOMP_PRP
*   else
*       1 5 0 SET_SUBCOMP_PRP
*       0 7 0 SET_SUBCOMP_PRP
*       0 8 0 SET_SUBCOMP_PRP
*       0 9 0 SET_SUBCOMP_PRP
*       0 10 0 SET_SUBCOMP_PRP
*       0 11 0 SET_SUBCOMP_PRP
*       0 12 0 SET_SUBCOMP_PRP
*       0 13 0 SET_SUBCOMP_PRP
*       0 14 0 SET_SUBCOMP_PRP
*   endif
*  ;
*
*  :BEGIN_PLOT
*     UPDATE_SETTINGS
*  ;
* !!!END-INTERACT
xX2 27 ProbeX2
.subckt ProbeX2 1  
R1 1 0 1e12
.ends

*## Multisim Component X1 ##*
* !!!BEGIN-INTERACT
*  : v_level            ++++f2 ;
*  0.0       VARIABLE   r1Volt
*  0.0       VARIABLE   r1Cur
*
*  :UPDATE_SETTINGS
*       1 5 0 SET_SUBCOMP_PRP
*       0 7 0 SET_SUBCOMP_PRP
*       0 8 0 SET_SUBCOMP_PRP
*       0 9 0 SET_SUBCOMP_PRP
*       0 10 0 SET_SUBCOMP_PRP
*       0 11 0 SET_SUBCOMP_PRP
*       0 12 0 SET_SUBCOMP_PRP
*       0 13 0 SET_SUBCOMP_PRP
*       0 14 0 SET_SUBCOMP_PRP
*       0.0 ==>_*r1Volt
*       0.0 ==>_*r1Cur
*  ;   
*
*  :OUT_DATA
*   GET_INSTANCE Resistor ::R r1 i  ==>_*r1Cur
*   1.0e12 *r1Cur f.*  ==>_*r1Volt
*   v_level *r1Volt  f.<=   if
*       0 5 0 SET_SUBCOMP_PRP
*       1 7 0 SET_SUBCOMP_PRP
*       1 8 0 SET_SUBCOMP_PRP
*       1 9 0 SET_SUBCOMP_PRP
*       1 10 0 SET_SUBCOMP_PRP
*       1 11 0 SET_SUBCOMP_PRP
*       1 12 0 SET_SUBCOMP_PRP
*       1 13 0 SET_SUBCOMP_PRP
*       1 14 0 SET_SUBCOMP_PRP
*   else
*       1 5 0 SET_SUBCOMP_PRP
*       0 7 0 SET_SUBCOMP_PRP
*       0 8 0 SET_SUBCOMP_PRP
*       0 9 0 SET_SUBCOMP_PRP
*       0 10 0 SET_SUBCOMP_PRP
*       0 11 0 SET_SUBCOMP_PRP
*       0 12 0 SET_SUBCOMP_PRP
*       0 13 0 SET_SUBCOMP_PRP
*       0 14 0 SET_SUBCOMP_PRP
*   endif
*  ;
*
*  :BEGIN_PLOT
*     UPDATE_SETTINGS
*  ;
* !!!END-INTERACT
xX1 26 ProbeX1
.subckt ProbeX1 1  
R1 1 0 1e12
.ends

*## Multisim Component U10 ##*
xU10    25
+      35
+      0
+      dU10.D0
+      dU10.D1
+      dU10.D2
+      dU10.D3
+      dU10.D4
+      dU10.D5
+      dU10.D6
+      dU10.D7
+      dU10.SOC
+      dU10.caretEOC ADC8__ADC_DAC__1

xU10.D0 dU10.D0 26 TIL_DRV__NON__1


xU10.D1 dU10.D1 27 TIL_DRV__NON__1


xU10.D2 dU10.D2 28 TIL_DRV__NON__1


xU10.D3 dU10.D3 29 TIL_DRV__NON__1


xU10.D4 dU10.D4 30 TIL_DRV__NON__1


xU10.D5 dU10.D5 31 TIL_DRV__NON__1


xU10.D6 dU10.D6 32 TIL_DRV__NON__1


xU10.D7 dU10.D7 33 TIL_DRV__NON__1


xU10.SOC 37 dU10.SOC TIL_RCV__NON__1


xU10.caretEOC dU10.caretEOC 34 TIL_DRV__NON__1


*## Multisim Component C1 ##*
cC1 23 0 0.0001

*## Multisim Component U6 ##*
xU6 23 21 25 3T_VirtualU6 PARAMS: Vos=0 Ib=0 Ioff=0 Av=200000 BW=100000000 Rin=10000000 Rout=10 Vpos=12 Vneg=-12 

.SUBCKT 3T_VirtualU6 in_pos in_neg out PARAMS: Av=500k BW=10Meg Rin=10Meg Rout=0 Vos=0 Ib=0 Ioff=0 Vpos=15 Vneg=-15 

* Input Stage: Rin, Ibias, Voffset
Vos in_pos 4 {Vos}
Ibias1 4 0 {Ib}
Ibias2 in_neg 0 {Ib}
Ios 4 in_neg {Ioff/2}
Rin 4 in_neg {Rin}

*Middle stage: Gain, frequency, voltage limiting
Bgain 0 6 I={v(4,in_neg)*Av/1meg }
R1 6 0 1meg
CP1 6 0 {Av/(2*pi*1meg*BW)}


Vpos 9 0 {Vpos}
Dlimit_pos 6 9 d1

Vneg 10 0 {Vneg}
Dlimit_neg 10 6 d1

.model d1 d(n=0.1) 

*Output stage: Buffer, output resistance 
E2 7 0 6 0 1
Rout 7 out {Rout}
.ends

*## Multisim Component R2 ##*
rR2 0 21 10 vresR2  
.model vresR2 r(  )

*## Multisim Component R1 ##*
rR1 22 23 10 vresR1  
.model vresR1 r(  )

*## Multisim Component V6 ##*
aV6 22 24 THERMAL_NOISEV6
.MODEL THERMAL_NOISEV6 noise_source(
+ noise_ratio= 2 resistance= 1000 temperature= {27+273.15} bandwith= 10000000000 )

*## Multisim Component R17 ##*
rR17 8 17 10 vresR17  
.model vresR17 r(  )

*## Multisim Component U8 ##*
xU8 42 17 17 3T_VirtualU8 PARAMS: Vos=0 Ib=0 Ioff=0 Av=200000 BW=100000000 Rin=10000000 Rout=10 Vpos=12 Vneg=-12 

.SUBCKT 3T_VirtualU8 in_pos in_neg out PARAMS: Av=500k BW=10Meg Rin=10Meg Rout=0 Vos=0 Ib=0 Ioff=0 Vpos=15 Vneg=-15 

* Input Stage: Rin, Ibias, Voffset
Vos in_pos 4 {Vos}
Ibias1 4 0 {Ib}
Ibias2 in_neg 0 {Ib}
Ios 4 in_neg {Ioff/2}
Rin 4 in_neg {Rin}

*Middle stage: Gain, frequency, voltage limiting
Bgain 0 6 I={v(4,in_neg)*Av/1meg }
R1 6 0 1meg
CP1 6 0 {Av/(2*pi*1meg*BW)}


Vpos 9 0 {Vpos}
Dlimit_pos 6 9 d1

Vneg 10 0 {Vneg}
Dlimit_neg 10 6 d1

.model d1 d(n=0.1) 

*Output stage: Buffer, output resistance 
E2 7 0 6 0 1
Rout 7 out {Rout}
.ends

*## Multisim Component U7 ##*
xU7 44 9 9 3T_VirtualU7 PARAMS: Vos=0 Ib=0 Ioff=0 Av=200000 BW=100000000 Rin=10000000 Rout=10 Vpos=12 Vneg=-12 

.SUBCKT 3T_VirtualU7 in_pos in_neg out PARAMS: Av=500k BW=10Meg Rin=10Meg Rout=0 Vos=0 Ib=0 Ioff=0 Vpos=15 Vneg=-15 

* Input Stage: Rin, Ibias, Voffset
Vos in_pos 4 {Vos}
Ibias1 4 0 {Ib}
Ibias2 in_neg 0 {Ib}
Ios 4 in_neg {Ioff/2}
Rin 4 in_neg {Rin}

*Middle stage: Gain, frequency, voltage limiting
Bgain 0 6 I={v(4,in_neg)*Av/1meg }
R1 6 0 1meg
CP1 6 0 {Av/(2*pi*1meg*BW)}


Vpos 9 0 {Vpos}
Dlimit_pos 6 9 d1

Vneg 10 0 {Vneg}
Dlimit_neg 10 6 d1

.model d1 d(n=0.1) 

*Output stage: Buffer, output resistance 
E2 7 0 6 0 1
Rout 7 out {Rout}
.ends

*## Multisim Component R18 ##*
rR18 24 8 1000 vresR18  
.model vresR18 r(  )

*## Multisim Component R16 ##*
rR16 7 9 10 vresR16  
.model vresR16 r(  )

*## Multisim Component R15 ##*
rR15 0 7 1000 vresR15  
.model vresR15 r(  )

*## Multisim Component U4 ##*
xU4 7 8 24 3T_VirtualU4 PARAMS: Vos=0 Ib=0 Ioff=0 Av=200000 BW=100000000 Rin=10000000 Rout=10 Vpos=12 Vneg=-12 

.SUBCKT 3T_VirtualU4 in_pos in_neg out PARAMS: Av=500k BW=10Meg Rin=10Meg Rout=0 Vos=0 Ib=0 Ioff=0 Vpos=15 Vneg=-15 

* Input Stage: Rin, Ibias, Voffset
Vos in_pos 4 {Vos}
Ibias1 4 0 {Ib}
Ibias2 in_neg 0 {Ib}
Ios 4 in_neg {Ioff/2}
Rin 4 in_neg {Rin}

*Middle stage: Gain, frequency, voltage limiting
Bgain 0 6 I={v(4,in_neg)*Av/1meg }
R1 6 0 1meg
CP1 6 0 {Av/(2*pi*1meg*BW)}


Vpos 9 0 {Vpos}
Dlimit_pos 6 9 d1

Vneg 10 0 {Vneg}
Dlimit_neg 10 6 d1

.model d1 d(n=0.1) 

*Output stage: Buffer, output resistance 
E2 7 0 6 0 1
Rout 7 out {Rout}
.ends


.SUBCKT TIL_RCV__NON__1 1 2
* TIL Receiver Model  1 = input, 2 = A/D out
 aADCin1 [1] [2] ADC
.MODEL ADC adc_bridge (in_low= 2.5 in_high = 2.5)
.ENDS

.SUBCKT TIL_DRV__NON__1 1 2
* TIL Driver Model  1 = D/A input, 2 = out
 aDACin1 [1] [2] aDAC
.MODEL aDAC dac_bridge (out_low= 0 out_high = 5 out_undef = 2.5)
.ENDS

.subckt ADC8__ADC_DAC__1 vin vref+ vref- F0d F1d F2d F3d F4d F5d F6d F7d clk eoc PARAMS: conversion_time=1u
xU3 clk EOC_clk ONESHOT PARAMS: pulse_width={conversion_time}
a2 EOC_clk eoc DELAY
.model DELAY d_delay(rise_delay=2n fall_delay=2n)

a1 Vin [F0 F1 F2 F3 F4 F5 F6 F7]  Vref+ Vref- ADC_core

**FFs
ab0 F0 ~EOC_clk DGND DGND F0d 100 FF
ab1 F1 ~EOC_clk DGND DGND F1d 101 FF
ab2 F2 ~EOC_clk DGND DGND F2d 102 FF
ab3 F3 ~EOC_clk DGND DGND F3d 103 FF
ab4 F4 ~EOC_clk DGND DGND F4d 104 FF
ab5 F5 ~EOC_clk DGND DGND F5d 105 FF
ab6 F6 ~EOC_clk DGND DGND F6d 106 FF
ab7 F7 ~EOC_clk DGND DGND F7d 107 FF

.MODEL ADC_core ew_nla2d( )
.MODEL FF d_dff(clk_delay=1n set_delay=1n reset_delay=1n ic=0 rise_delay=1n fall_delay=1n)


.subckt ONESHOT in out PARAMS: pulse_width=100n
aU8 in 4 DIGITAL_DELAY
aU7 4 2 NOT
aU6  [4 2] 9 AND2
aU5 in 1 NOT
aU3  [in 1] 6 AND2
aU2 U2_OPEN_S U2_OPEN_R U2_OPEN_CLK 6 9 out U2_OPEN_notQ SR_FF
.MODEL SR_FF d_SRff (clk_delay = 1n set_delay = 1n reset_delay= 1n ic = 0 rise_delay = 1n fall_delay = 1n)
.MODEL AND2 d_and ( rise_delay = 1n fall_delay = 1n)
.MODEL NOT d_inverter (rise_delay = 10n fall_delay = 10n)
.model DIGITAL_DELAY d_delay (rise_delay={pulse_width} fall_delay={pulse_width} delay_type="transport")
.ends
     .ends


