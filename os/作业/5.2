 #include <iostream>
 #include <thread>
 #include <mutex>
 #include <condition_variable>
 std::mutex mtx;
 std::condition_variable cv;
 int count = 0;
 void printA() {
    for (int i = 0; i < 10; ++i) {
        std::unique_lock<std::mutex> lock(mtx);
        cv.wait(lock, [] { return count % 4 == 3; });
        std::cout << "A";
        count++;
        cv.notify_all();
    }
 }
 void printB() {
    for (int i = 0; i < 10; ++i) {
        std::unique_lock<std::mutex> lock(mtx);
        cv.wait(lock, [] { return count % 4 == 2; });
        std::cout << "B";
        count++;
        cv.notify_all();
    }
 }
 void printC() {
    for (int i = 0; i < 10; ++i) {
        std::unique_lock<std::mutex> lock(mtx);
        cv.wait(lock, [] { return count % 4 == 1; });
        std::cout << "C";
        count++;
        cv.notify_all();
    }
}
 void printD() {
    for (int i = 0; i < 10; ++i) {
        std::unique_lock<std::mutex> lock(mtx);
        cv.wait(lock, [] { return count % 4 == 0; });
        std::cout << "D";
        count++;
        cv.notify_all();
    }
 }
 int main() {
    std::thread t1(printA);
    std::thread t2(printB);
    std::thread t3(printC);
    std::thread t4(printD);
    t1.join();
    t2.join();
    t3.join();
    t4.join();
    std::cout << std::endl;
    return 0;
 }